{"version":3,"file":"main.js","mappings":";;;;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1DmC;AACnC;AACO;AACP,iBAAiB,aAAmB;AACpC;AACA,4BAA4B,eAAqB;AACjD;AACA;AACA,qBAAqB,aAAmB;AACxC,qCAAqC,gBAAsB;AAC3D;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,2BAA2B,aAAmB;AAC9C,iDAAiD,gBAAsB;AACvE;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,4BAA4B,aAAmB;AAC/C,yBAAyB,eAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDmC;AACnC;AACA;AACA,oBAAoB,aAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,aAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,iBAAiB,aAAmB;AACpC;AACA,4BAA4B,eAAqB;AACjD;AACA;AACA,qBAAqB,aAAmB;AACxC,qCAAqC,gBAAsB;AAC3D;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,2BAA2B,aAAmB;AAC9C,iDAAiD,gBAAsB;AACvE;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,uBAAuB,aAAmB;AAC1C,yCAAyC,gBAAsB;AAC/D;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,wBAAwB,aAAmB;AAC3C,2CAA2C,gBAAsB;AACjE;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,oCAAoC,aAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,aAAmB;AACxC,qCAAqC,gBAAsB;AAC3D;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,wBAAwB,aAAmB;AAC3C;AACA,2CAA2C,gBAAsB;AACjE;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,kCAAkC,aAAmB;AACrD;AACA;AACA;AACA;AACA,oBAAoB,aAAmB;AACvC;AACA,uBAAuB,aAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,aAAmB;AAC/C,gCAAgC,eAAqB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,eAAqB;AAClD;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,qBAAqB,aAAmB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;;AC/KmC;AACnC;AACA;AACA,uBAAuB,aAAmB;AAC1C;AACA;AACA;AACA;AACA,kCAAkC,aAAmB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,aAAmB;AAC7C,qBAAqB,aAAmB;AACxC;AACA,qBAAqB,aAAmB;AACxC,uBAAuB,aAAmB;AAC1C,yBAAyB,aAAmB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,aAAmB;AAC1C,wBAAwB,aAAmB;AAC3C;AACA;AACA;AACA,8BAA8B,aAAmB;AACjD;AACA;AACA;AACA,uBAAuB,aAAmB;AAC1C;AACA,kCAAkC,qCAAqC,EAAE,oBAAoB,OAAO,qBAAqB,QAAQ,uBAAuB;AACxJ;AACA;AACA;AACA,2BAA2B,aAAmB;AAC9C;AACA;AACA;AACA,wBAAwB,aAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,uBAAuB,aAAmB;AAC1C;AACA,qBAAqB,aAAmB;AACxC,yBAAyB,aAAmB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe;AACf,oBAAoB,aAAmB;AACvC;AACA,6BAA6B,aAAmB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,eAAqB;AACjD,qBAAqB,aAAmB;AACxC,uBAAuB,aAAmB;AAC1C;AACA;AACA;AACA;AACA,kCAAkC,aAAmB;AACrD;AACA;AACA;AACA,2BAA2B,aAAmB;AAC9C;AACA;AACA,KAAK;AACL;AACA;AACA,2BAA2B,aAAmB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,aAAmB;AACzC,yBAAyB,eAAqB;AAC9C;AACA;AACA;AACA;AACA;;AC/Ge;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBmC;AACnC;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,OAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,0BAA0B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpI6B;AAC7B;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA,4BAA4B,IAAI;AAChC;AACA;AACA;AACA;AACA;;ACpDmC;AACnC;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CgE;AAChE;AACe;AACf;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uBAAuB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uBAAuB;AAC/B;AACA;AACA;AACA;AACA;AACA;;ACpEqB;AAC0E;AACT;AACpB;AACf;AAChB;AACN;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,oBAAoB;AAChF;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtmBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,IAAI;AAC7B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,IAAI;AAC7B;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,OAAO;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,kC","sources":["webpack://webpack-template/./src/HtmlCreators/utils.js","webpack://webpack-template/./src/HtmlCreators/newProjectForm.js","webpack://webpack-template/./src/HtmlCreators/newTaskForm.js","webpack://webpack-template/./src/HtmlCreators/projectViewer.js","webpack://webpack-template/./src/Subtask.js","webpack://webpack-template/./src/Task.js","webpack://webpack-template/./src/Project.js","webpack://webpack-template/./src/ProjectsDatabaseManager.js","webpack://webpack-template/./src/ProjectsManager.js","webpack://webpack-template/./src/index.js"],"sourcesContent":["export function createElement(tagName, ...classList) {\r\n    const element = document.createElement(tagName);\r\n\r\n    for (const className of classList) {\r\n        element.classList.add(className);\r\n    }\r\n\r\n    return element;\r\n}\r\n\r\nexport function createFormRow() {\r\n    return createElement(\"div\", \"form-row\");\r\n}\r\n\r\nexport function createMainTitle(text) {\r\n    const titleDiv = createElement(\"div\", \"main-title\");\r\n    const icon = createElement(\"div\", \"title-icon\", \"icon\");\r\n    const textNode = document.createTextNode(text);\r\n    titleDiv.appendChild(icon);\r\n    titleDiv.appendChild(textNode);\r\n\r\n    return titleDiv;\r\n}\r\n\r\nexport function createLabelInput(data) {\r\n    const label = document.createElement(\"label\");\r\n    for (const className of data.labelClassList) {\r\n        label.classList.add(className);\r\n    }\r\n    label.for = data.id;\r\n    label.textContent = data.label;\r\n\r\n    let input;\r\n    if (data.type === \"textarea\") {\r\n        input = document.createElement(\"textarea\");\r\n        input.rows = 2;\r\n    }\r\n    else {\r\n        input = document.createElement(\"input\");\r\n        input.type = data.type;\r\n    }\r\n    input.id = data.id;\r\n    input.name = data.id;\r\n\r\n    return [label, input];\r\n}\r\n\r\nexport function createAddButton(text, ...classList) {\r\n    const button = createElement(\"button\", ...classList, \"add-button\");\r\n    const plusIcon = createElement(\"span\", \"plus-icon\", \"icon\");\r\n    plusIcon.textContent = \"+\";\r\n\r\n    const textNode = document.createTextNode(text);\r\n\r\n    button.appendChild(plusIcon);\r\n    button.appendChild(textNode);\r\n\r\n    return button;\r\n}","import * as utils from \"./utils.js\"\r\n\r\nexport function createNewProjectForm() {\r\n    const form = utils.createElement(\"form\", \"content\");\r\n\r\n    const projectTitleDiv = utils.createMainTitle(\"New Project\");\r\n    form.appendChild(projectTitleDiv);\r\n\r\n    const titleRow = utils.createFormRow();\r\n    const [titleLabel, titleInput] = utils.createLabelInput({\r\n        label: \"Project title\",\r\n        id: \"project-title\",\r\n        labelClassList: [\"section-title\"],\r\n        type: \"text\",\r\n    });\r\n    titleRow.appendChild(titleLabel);\r\n    titleRow.appendChild(titleInput);\r\n    form.appendChild(titleRow);\r\n\r\n    const descriptionRow = utils.createFormRow();\r\n    const [descriptionLabel, descriptionInput] = utils.createLabelInput({\r\n        label: \"Project description\",\r\n        id: \"project-description\",\r\n        labelClassList: [\"section-title\"],\r\n        type: \"textarea\",\r\n    });\r\n    descriptionRow.appendChild(descriptionLabel);\r\n    descriptionRow.appendChild(descriptionInput);\r\n    form.appendChild(descriptionRow);\r\n\r\n    const buttonContainer = utils.createElement(\"div\", \"buttons\");\r\n    const createButton = utils.createAddButton(\"Create Project\", \"create-project\");\r\n    buttonContainer.appendChild(createButton);\r\n    form.appendChild(buttonContainer);\r\n\r\n    return form;\r\n}\r\n\r\nexport function createEditProjectForm(project) {\r\n    const form = createNewProjectForm();\r\n\r\n    form.querySelector(\"#project-title\").value = project.title;\r\n    form.querySelector(\"#project-description\").value = project.description;\r\n\r\n    const saveButton = form.querySelector(\".create-project\");\r\n    saveButton.textContent = \"Save Project\";\r\n    saveButton.classList.add(\"save-project\");\r\n\r\n    return form;\r\n}","import * as utils from \"./utils.js\"\r\n\r\nfunction createSubtaskDiv() {\r\n    const subtask = utils.createElement(\"div\", \"subtask\");\r\n\r\n    const input = document.createElement(\"input\");\r\n    input.type = \"text\";\r\n    input.id = \"subtask-description\";\r\n    input.name = \"subtask-description[]\";\r\n\r\n    subtask.appendChild(input);\r\n    const deleteIcon = utils.createElement(\"div\", \"delete-subtask\", \"x-icon\", \"icon\", \"red-icon\");\r\n    deleteIcon.addEventListener(\"click\", () => subtask.remove());\r\n    subtask.appendChild(deleteIcon);\r\n\r\n    return subtask;\r\n}\r\n\r\nfunction addSubtaskInput() {\r\n    const subtasksContainer = document.querySelector(\".form-row.subtasks\");\r\n    const input = createSubtaskDiv();\r\n    subtasksContainer.appendChild(input);\r\n}\r\n\r\nfunction fixISODate(date) {\r\n    const MILLISECONDS_PER_MINUTE = 60 * 1000;\r\n    const TIMEZONE_OFFSET_MILLISECONDS = new Date().getTimezoneOffset() * MILLISECONDS_PER_MINUTE;\r\n    return new Date(date.getTime() - TIMEZONE_OFFSET_MILLISECONDS);\r\n}\r\n\r\nfunction getFixedIsoDateString(date) {\r\n    return fixISODate(date)\r\n        .toISOString()\r\n        .replace(\"Z\", \"\")\r\n        .slice(0, -7);\r\n}\r\n\r\nexport function createNewTaskForm() {\r\n    const form = utils.createElement(\"form\", \"content\");\r\n\r\n    const projectTitleDiv = utils.createMainTitle(\"New Task\");\r\n    form.appendChild(projectTitleDiv);\r\n\r\n    const titleRow = utils.createFormRow();\r\n    const [titleLabel, titleInput] = utils.createLabelInput({\r\n        label: \"Task title\",\r\n        id: \"task-title\",\r\n        labelClassList: [\"section-title\"],\r\n        type: \"text\",\r\n    });\r\n    titleRow.appendChild(titleLabel);\r\n    titleRow.appendChild(titleInput);\r\n    form.appendChild(titleRow);\r\n\r\n    const descriptionRow = utils.createFormRow();\r\n    const [descriptionLabel, descriptionInput] = utils.createLabelInput({\r\n        label: \"Task description\",\r\n        id: \"task-description\",\r\n        labelClassList: [\"section-title\"],\r\n        type: \"textarea\",\r\n    });\r\n    descriptionRow.appendChild(descriptionLabel);\r\n    descriptionRow.appendChild(descriptionInput);\r\n    form.appendChild(descriptionRow);\r\n\r\n    const dueDateRow = utils.createFormRow();\r\n    const [dueDateLabel, dueDateInput] = utils.createLabelInput({\r\n        label: \"Due Date\",\r\n        id: \"task-due-date\",\r\n        labelClassList: [\"section-title\"],\r\n        type: \"datetime-local\",\r\n    });\r\n    dueDateInput.value = getFixedIsoDateString(new Date());\r\n    dueDateRow.appendChild(dueDateLabel);\r\n    dueDateRow.appendChild(dueDateInput);\r\n    form.appendChild(dueDateRow);\r\n\r\n    const priorityRow = utils.createFormRow();\r\n    const [priorityLabel, priorityInput] = utils.createLabelInput({\r\n        label: \"Priority\",\r\n        id: \"task-priority\",\r\n        labelClassList: [\"section-title\"],\r\n        type: \"number\",\r\n    });\r\n\r\n    priorityInput.min = 0;\r\n    priorityInput.max = 5;\r\n    const priorityMinMaxIndicator = utils.createElement(\"div\");\r\n    priorityMinMaxIndicator.textContent = \"(minimum: 0 | maximum: 5)\";\r\n    priorityLabel.appendChild(priorityMinMaxIndicator);\r\n\r\n    priorityRow.appendChild(priorityLabel);\r\n    priorityRow.appendChild(priorityInput);\r\n    form.appendChild(priorityRow);\r\n\r\n    const notesRow = utils.createFormRow();\r\n    const [notesLabel, notesInput] = utils.createLabelInput({\r\n        label: \"Notes\",\r\n        id: \"task-notes\",\r\n        labelClassList: [\"section-title\"],\r\n        type: \"textarea\",\r\n    });\r\n    notesInput.rows = 10;\r\n    notesRow.appendChild(notesLabel);\r\n    notesRow.appendChild(notesInput);\r\n    form.appendChild(notesRow);\r\n\r\n    const subtasksRow = utils.createFormRow();\r\n    subtasksRow.classList.add(\"subtasks\");\r\n    const [subtasksLabel, subtasksInput] = utils.createLabelInput({\r\n        label: \"Subtasks\",\r\n        id: \"subtask-description\",\r\n        labelClassList: [\"section-title\"],\r\n        type: \"text\",\r\n    });\r\n    subtasksInput.name = \"subtask-description[]\";\r\n\r\n    const subtaskEmptyIndicator = utils.createElement(\"div\");\r\n    subtaskEmptyIndicator.textContent = \"(empty subtasks will be ignored)\";\r\n    subtasksLabel.appendChild(subtaskEmptyIndicator);\r\n    subtasksRow.appendChild(subtasksLabel);\r\n\r\n    const subtask = utils.createElement(\"div\", \"subtask\");\r\n    subtask.appendChild(subtasksInput);\r\n    const deleteIcon = utils.createElement(\"div\", \"delete-subtask\", \"x-icon\", \"icon\", \"red-icon\");\r\n    deleteIcon.addEventListener(\"click\", () => subtask.remove());\r\n    subtask.appendChild(deleteIcon);\r\n\r\n    subtasksRow.appendChild(subtask);\r\n\r\n    form.appendChild(subtasksRow);\r\n\r\n    const buttonContainer = utils.createElement(\"div\", \"button-container\");\r\n    const createSubtaskButton = utils.createAddButton(\"Create Subtask\", \"create-subtask\");\r\n    createSubtaskButton.type = \"button\";\r\n    createSubtaskButton.addEventListener(\"click\", addSubtaskInput);\r\n    buttonContainer.appendChild(createSubtaskButton);\r\n\r\n\r\n\r\n    const createTaskButton = utils.createAddButton(\"Create Task\", \"create-task\");\r\n    buttonContainer.appendChild(createTaskButton);\r\n    form.appendChild(buttonContainer);\r\n\r\n    return form;\r\n}\r\n\r\nexport function createEditTaskForm(task) {\r\n    form = createNewTaskForm();\r\n\r\n    form.querySelector(\"#task-title\").value = task.title;\r\n    form.querySelector(\"#task-description\").value = task.description;\r\n\r\n    form.querySelector(\"#task-due-date\").value = getFixedIsoDateString(task.dueDate);\r\n\r\n    form.querySelector(\"#task-priority\").value = task.priority;\r\n    form.querySelector(\"#task-notes\").value = task.notes;\r\n\r\n    form.querySelector(\".subtasks\").innerHTML = \"\";\r\n    task.subtasks.forEach((subtask) => {\r\n        const subtaskDiv = createSubtaskDiv();\r\n        const subtaskInput = subtaskDiv.querySelector(\"input\");\r\n        subtaskInput.value = subtask.description;\r\n        form.querySelector(\".subtasks\").appendChild(subtaskDiv);\r\n    });\r\n\r\n    const saveButton = form.querySelector(\".create-task\");\r\n    saveButton.innerHTML = \"\";\r\n    const saveIcon = utils.createElement(\"div\", \"save-icon\", \"icon\");\r\n    saveButton.appendChild(saveIcon);\r\n    const textNode = document.createTextNode(\"Save Task\");\r\n    saveButton.appendChild(textNode);\r\n    saveButton.classList.add(\"save-task\");\r\n\r\n    return form;\r\n}","import * as utils from \"./utils.js\"\r\n\r\nfunction createSubtask(subtask) {\r\n    const subtaskDiv = utils.createElement(\"div\", \"subtask\");\r\n    const input = document.createElement(\"input\");\r\n    input.type = \"checkbox\";\r\n    input.checked = subtask.completed;\r\n    subtaskDiv.appendChild(input);\r\n    const subtaskDescriptionDiv = utils.createElement(\"div\", \"subtask-description\");\r\n    subtaskDescriptionDiv.textContent = subtask.description;\r\n    subtaskDiv.appendChild(subtaskDescriptionDiv);\r\n\r\n    return subtaskDiv;\r\n}\r\n\r\nfunction createTask(task, taskIndex) {\r\n    const taskContainer = utils.createElement(\"div\", \"task\");\r\n    const titleDiv = utils.createElement(\"div\", \"section-title\");\r\n    const textNode = document.createTextNode(task.title);\r\n    const editIcon = utils.createElement(\"div\", \"edit-task\", \"pencil-icon\", \"icon\");\r\n    const deleteIcon = utils.createElement(\"div\", \"delete-task\", \"x-icon\", \"red-icon\", \"icon\");\r\n    const completeIcon = utils.createElement(\"div\", \"complete-task\", \"check-icon\", \"green-icon\", \"icon\");\r\n    if (task.completed) {\r\n        completeIcon.classList.add(\"grey-icon\");\r\n    }\r\n    titleDiv.appendChild(textNode);\r\n    titleDiv.appendChild(editIcon);\r\n    titleDiv.appendChild(deleteIcon);\r\n    titleDiv.appendChild(completeIcon);\r\n    taskContainer.appendChild(titleDiv);\r\n\r\n    const detailsDiv = utils.createElement(\"div\", \"task-status-details\");\r\n    const priorityDiv = utils.createElement(\"div\", \"task-priority\");\r\n    priorityDiv.setAttribute(\"data-priority\", task.priority);\r\n    detailsDiv.appendChild(priorityDiv);\r\n\r\n    const completeStatusDiv = utils.createElement(\"div\", \"task-complete-status\");\r\n    completeStatusDiv.setAttribute(\"data-complete-status\", task.completed ? \"completed\" : \"pending\");\r\n    detailsDiv.appendChild(completeStatusDiv);\r\n\r\n    const dueDateDiv = utils.createElement(\"div\", \"task-due-date\");\r\n    const remainingTime = task.remainingTime;\r\n    dueDateDiv.textContent = `⏳ ${remainingTime.isNegative ? \"-\" : \"\"} ${remainingTime.days} days ${remainingTime.hours} hours ${remainingTime.minutes} minutes remaining`;\r\n    detailsDiv.appendChild(dueDateDiv);\r\n    taskContainer.appendChild(detailsDiv);\r\n\r\n    const descriptionDiv = utils.createElement(\"div\", \"task-description\");\r\n    descriptionDiv.textContent = task.description;\r\n    taskContainer.appendChild(descriptionDiv);\r\n\r\n    const subtasksDiv = utils.createElement(\"div\", \"task-subtasks\");\r\n    task.subtasks.forEach((subtask, subTaskIndex) => {\r\n        const subtaskDiv = createSubtask(subtask);\r\n        subtaskDiv.dataset.subtaskIndex = subTaskIndex;\r\n        subtaskDiv.dataset.taskIndex = taskIndex;\r\n        subtasksDiv.appendChild(subtaskDiv);\r\n    });\r\n    taskContainer.appendChild(subtasksDiv);\r\n\r\n    const notesTitle = utils.createElement(\"div\", \"section-title\");\r\n    notesTitle.textContent = \"Notes\";\r\n    const notesDiv = utils.createElement(\"div\", \"task-notes\");\r\n    const notesContent = utils.createElement(\"pre\");\r\n    notesContent.textContent = task.notes;\r\n    notesDiv.appendChild(notesContent);\r\n    taskContainer.appendChild(notesDiv);\r\n\r\n    return taskContainer;\r\n}\r\n\r\n\r\nexport default function createProjectViewer(project) {\r\n    const content = utils.createElement(\"div\", \"content\");\r\n    if (!project) {\r\n        const noProjectDiv = utils.createElement(\"div\", \"no-project-selected\");\r\n        const textNode = document.createTextNode(\"No project selected. Click on a project to view it here or click on the 'Create Project' button to create a new project.\");\r\n        noProjectDiv.appendChild(textNode);\r\n        content.appendChild(noProjectDiv);\r\n        return content;\r\n    }\r\n\r\n    const projectTitleDiv = utils.createMainTitle(project.title);\r\n    const editIcon = utils.createElement(\"div\", \"edit-project\", \"pencil-icon\", \"icon\");\r\n    const deleteIcon = utils.createElement(\"div\", \"delete-project\", \"x-icon\", \"red-icon\", \"icon\");\r\n    projectTitleDiv.appendChild(editIcon);\r\n    projectTitleDiv.appendChild(deleteIcon);\r\n    content.appendChild(projectTitleDiv);\r\n\r\n    const projectDescriptionDiv = utils.createElement(\"div\", \"project-description\");\r\n    projectDescriptionDiv.textContent = project.description;\r\n    content.appendChild(projectDescriptionDiv);\r\n\r\n    const tasksContainer = utils.createElement(\"div\", \"tasks\");\r\n    project.tasks.forEach((task, index) => {\r\n        tasksContainer.appendChild(createTask(task, index));\r\n    });\r\n\r\n    if (project.tasks.length === 0) {\r\n        const noTasksDiv = utils.createElement(\"div\", \"no-tasks\");\r\n        const textNode = document.createTextNode(\"No tasks found. Click on the 'Create Task' button to create a new task.\");\r\n        noTasksDiv.appendChild(textNode);\r\n        tasksContainer.appendChild(noTasksDiv);\r\n    }\r\n    content.appendChild(tasksContainer);\r\n\r\n    const buttonDiv = utils.createElement(\"div\", \"buttons\");\r\n    const createButton = utils.createAddButton(\"Create Task\", \"create-task\");\r\n    buttonDiv.appendChild(createButton);\r\n    content.appendChild(buttonDiv);\r\n\r\n    return content;\r\n}","export default class Subtask {\r\n    #completed = false;\r\n\r\n    constructor(description, completed) {\r\n        this.description = description;\r\n        this.#completed = Boolean(completed);\r\n    }\r\n\r\n    setCompleteStatus(status) {\r\n        this.#completed = Boolean(status);\r\n    }\r\n\r\n    get completed() {\r\n        return this.#completed;\r\n    }\r\n\r\n    toJSON() {\r\n        return {\r\n            description: this.description,\r\n            completed: this.#completed\r\n        }\r\n    }\r\n}","import Subtask from \"./Subtask.js\";\r\n\r\nexport default class Task {\r\n    #subtasks = [];\r\n\r\n    constructor(title, description, dueDate, priority, completed, notes) {\r\n        this.title = title ?? \"\";\r\n        this.description = description ?? \"\";\r\n        this._dueDate = new Date(dueDate);\r\n        this._priority = Task.validatePriority(priority);\r\n        this.completed = Boolean(completed);\r\n        this.notes = notes ?? \"\";\r\n    }\r\n\r\n\r\n    get priority() {\r\n        return this._priority;\r\n    }\r\n\r\n    set priority(value) {\r\n        this._priority = Task.validatePriority(value);\r\n    }\r\n\r\n    get dueDate() {\r\n        return this._dueDate;\r\n    }\r\n\r\n    set dueDate(value) {\r\n        this._dueDate = new Date(value);\r\n    }\r\n\r\n    get subtasks() {\r\n        return [...this.#subtasks];\r\n    }\r\n\r\n    get remainingTime() {\r\n        const currentTime = new Date().getTime();\r\n        const isNegative = this._dueDate.getTime() < currentTime;\r\n        const difference = Math.abs(this._dueDate.getTime() - currentTime);\r\n\r\n        const days = Math.floor(difference / (1000 * 60 * 60 * 24));\r\n        const hours = Math.floor((difference % (1000 * 60 * 60 * 24) / (1000 * 60 * 60)));\r\n        const minutes = Math.floor((difference % (1000 * 60 * 60) / (1000 * 60)));\r\n        const seconds = Math.floor((difference % (1000 * 60) / (1000)));\r\n\r\n        return {\r\n            isNegative,\r\n            days,\r\n            hours,\r\n            minutes,\r\n            seconds\r\n        }\r\n    }\r\n\r\n    static validatePriority(value) {\r\n        const parsedValue = parseInt(value);\r\n        if (isNaN(parsedValue) || parsedValue < 0) {\r\n            return 0;\r\n        }\r\n        return parsedValue;\r\n    }\r\n\r\n    completeTodo() {\r\n        this.completed = true;\r\n\r\n        for (let subtask of this.#subtasks) {\r\n            subtask.setCompleteStatus(true);\r\n        }\r\n    }\r\n\r\n    clearTodoCompletion() {\r\n        this.completed = false;\r\n    }\r\n\r\n    completeSubtask(index) {\r\n        if (this.#subtasks[index]) {\r\n            this.#subtasks[index].setCompleteStatus(true);\r\n        }\r\n    }\r\n\r\n    clearSubtaskCompletion(index) {\r\n        if (this.#subtasks[index]) {\r\n            this.#subtasks[index].setCompleteStatus(false);\r\n        }\r\n    }\r\n\r\n    addSubtask(description) {\r\n        if (!description) {\r\n            return;\r\n        }\r\n\r\n        this.#subtasks.push(new Subtask(description));\r\n    }\r\n\r\n    removeSubtask(index) {\r\n        this.#subtasks.splice(index, 1);\r\n    }\r\n\r\n    static fromJSON(json) {\r\n        const data = typeof json === \"string\" ? JSON.parse(json) : json;\r\n\r\n        const task = new Task(\r\n            data.title,\r\n            data.description,\r\n            data.dueDate,\r\n            data.priority,\r\n            data.completed,\r\n            data.notes\r\n        );\r\n\r\n        for (let i = 0; i < data.subtasks.length; i++) {\r\n            const subtask = data.subtasks[i];\r\n            task.addSubtask(subtask.description);\r\n            if (subtask.completed) {\r\n                task.completeSubtask(i);\r\n            }\r\n        }\r\n\r\n        return task;\r\n    }\r\n\r\n    toJSON() {\r\n        return {\r\n            title: this.title,\r\n            description: this.description,\r\n            dueDate: this._dueDate,\r\n            priority: this._priority,\r\n            completed: this.completed,\r\n            notes: this.notes,\r\n            subtasks: this.#subtasks\r\n        }\r\n    }\r\n}","import Task from \"./Task.js\";\r\n\r\nexport default class Project {\r\n    #tasks = [];\r\n\r\n    constructor(title, description, id) {\r\n        this.id = id ?? Date.now().toString(36);\r\n        this.title = title;\r\n        this.description = description;\r\n    }\r\n\r\n    addTask(task) {\r\n        this.#tasks.push(task);\r\n    }\r\n\r\n    replaceTask(index, task) {\r\n        this.#tasks.splice(index, 1, task);\r\n    }\r\n\r\n    removeTask(index) {\r\n        this.#tasks.splice(index, 1);\r\n    }\r\n\r\n    removeSubtask(taskIndex, subtaskIndex) {\r\n        this.#tasks[taskIndex].removeSubtask(subtaskIndex);\r\n    }\r\n\r\n    get tasks() {\r\n        return [...this.#tasks];\r\n    }\r\n\r\n    toJSON() {\r\n        return {\r\n            id: this.id,\r\n            title: this.title,\r\n            description: this.description,\r\n            tasks: this.#tasks\r\n        }\r\n    }\r\n\r\n    static fromJSON(json) {\r\n        const data = typeof json === \"string\" ? JSON.parse(json) : json;\r\n\r\n        const project = new Project(data.title, data.description, data.id);\r\n\r\n        for (let i = 0; i < data.tasks.length; i++) {\r\n            const task = data.tasks[i];\r\n            project.addTask(Task.fromJSON(task));\r\n        }\r\n\r\n        return project;\r\n    }\r\n}","import Project from \"./Project.js\";\r\n\r\nexport default class ProjectsDatabaseManager {\r\n    /**\r\n     * LocalStorage structure\r\n     * key        | value\r\n     * ------------------------------------------------------\r\n     * username   | [idProject1, idProject2, ..., idProjectN]\r\n     *            |\r\n     * idProject1 | {project}\r\n     * idProjectN | {project}\r\n     */\r\n\r\n    static saveProject(user, project) {\r\n        const userProjects = JSON.parse(localStorage.getItem(user)) ?? [];\r\n        if (!userProjects.includes(project.id)) {\r\n            userProjects.push(project.id);\r\n        }\r\n        localStorage.setItem(user, JSON.stringify(userProjects));\r\n\r\n        localStorage.setItem(project.id, JSON.stringify(project));\r\n    }\r\n\r\n    static loadProject(id) {\r\n        return Project.fromJSON(localStorage.getItem(id));\r\n    }\r\n\r\n    static removeProject(user, projectId) {\r\n        const userProjects = JSON.parse(localStorage.getItem(user)) ?? [];\r\n        const index = userProjects.indexOf(projectId);\r\n        if (index !== -1) {\r\n            userProjects.splice(index, 1);\r\n            localStorage.setItem(user, JSON.stringify(userProjects));\r\n            localStorage.removeItem(projectId);\r\n        }\r\n    }\r\n\r\n    static getUserProjects(user) {\r\n        const userProjects = JSON.parse(localStorage.getItem(user)) ?? [];\r\n        const projects = [];\r\n\r\n        for (const projectId of userProjects) {\r\n            projects.push(ProjectsDatabaseManager.loadProject(projectId));\r\n        }\r\n\r\n        return projects;\r\n    }\r\n}","import ProjectsDatabaseManager from \"./ProjectsDatabaseManager\";\r\n\r\nexport default class ProjectsManager {\r\n    constructor(user) {\r\n        this.user = user;\r\n        this.projects = ProjectsDatabaseManager.getUserProjects(user);\r\n        this.currenProject = this.projects[0] ?? null;\r\n    }\r\n\r\n    addProject(project) {\r\n        this.projects.push(project);\r\n        this.currenProject = project;\r\n        this.saveProject(project);\r\n    }\r\n\r\n    saveProject(project) {\r\n        if (!project) {\r\n            project = this.currenProject;\r\n        };\r\n        ProjectsDatabaseManager.saveProject(this.user, project)\r\n    }\r\n\r\n    addTask(task) {\r\n        this.currenProject.addTask(task);\r\n        this.saveProject(this.currenProject);\r\n    }\r\n\r\n    addSubtask(taskIndex, subtask) {\r\n        const task = this.currenProject.tasks[taskIndex];\r\n        task.addSubtask(subtask);\r\n        this.saveProject(this.currenProject);\r\n    }\r\n\r\n    removeTask(taskIndex) {\r\n        this.currenProject.removeTask(taskIndex);\r\n        this.saveProject(this.currenProject);\r\n    }\r\n\r\n    replaceTask(taskIndex, task) {\r\n        this.currenProject.replaceTask(taskIndex, task);\r\n        this.saveProject(this.currenProject);\r\n    }\r\n\r\n    setCurrentProject(projectIndex) {\r\n        this.currenProject = this.projects[projectIndex];\r\n\r\n        return this.currenProject;\r\n    }\r\n\r\n    setSubtaskStatus(taskIndex, subtaskIndex, status) {\r\n        if (status) {\r\n            this.currenProject.tasks[taskIndex].completeSubtask(subtaskIndex);\r\n        }\r\n        else {\r\n            this.currenProject.tasks[taskIndex].clearSubtaskCompletion(subtaskIndex);\r\n        }\r\n        this.saveProject(this.currenProject);\r\n    }\r\n\r\n    removeProject(projectId) {\r\n        this.projects = this.projects.filter((project) => project.id !== projectId);\r\n        this.currenProject = this.projects[0] ?? null;\r\n        ProjectsDatabaseManager.removeProject(this.user, projectId);\r\n    }\r\n\r\n    allSubtaskCompleted(taskIndex) {\r\n        return this.currenProject.tasks[taskIndex].subtasks.every((subtask) => subtask.completed);\r\n    }\r\n}","import \"./style.css\";\r\nimport { createNewProjectForm, createEditProjectForm } from \"./HtmlCreators/newProjectForm.js\";\r\nimport { createNewTaskForm, createEditTaskForm } from \"./HtmlCreators/newTaskForm.js\";\r\nimport createProjectViewer from \"./HtmlCreators/projectViewer.js\";\r\nimport ProjectsManager from \"./ProjectsManager.js\";\r\nimport Project from \"./Project.js\";\r\nimport Task from \"./Task.js\";\r\n\r\nconst loadContent = (function () {\r\n    function listMyProjects() {\r\n        const myProjectsContainer = document.querySelector(\".my-projects-container\");\r\n        myProjectsContainer.innerHTML = \"\";\r\n\r\n        projectManager.projects.forEach((project, index) => {\r\n            const projectButton = document.createElement(\"button\");\r\n            projectButton.classList.add(\"project-title\");\r\n\r\n            const icon = document.createElement(\"span\");\r\n            icon.classList.add(\"folder-icon\", \"icon\");\r\n            projectButton.appendChild(icon);\r\n\r\n            const textNode = document.createTextNode(project.title);\r\n            projectButton.appendChild(textNode);\r\n\r\n            projectButton.addEventListener(\"click\", () => { viewProject(index) });\r\n\r\n            myProjectsContainer.appendChild(projectButton);\r\n        });\r\n    }\r\n\r\n    function viewProject(projectIndex) {\r\n        if (projectIndex !== undefined) {\r\n            projectManager.setCurrentProject(projectIndex);\r\n        }\r\n\r\n        setContent(createProjectViewer, projectManager.currenProject);\r\n\r\n        if (!projectManager.currenProject) {\r\n            return;\r\n        }\r\n\r\n        const createTaskButton = document.querySelector(\".create-task\");\r\n        createTaskButton.addEventListener(\"click\", loadTaskCreation);\r\n\r\n        const editProjectButton = document.querySelector(\".edit-project\");\r\n        editProjectButton.addEventListener(\"click\", loadProjectEdition);\r\n\r\n        const deleteProjectButton = document.querySelector(\".delete-project\");\r\n        deleteProjectButton.addEventListener(\"click\", handleDeleteProject);\r\n\r\n        const editTasksButtons = document.querySelectorAll(\".edit-task\");\r\n        editTasksButtons.forEach((button, index) =>\r\n            button.addEventListener(\"click\", () => loadTaskEdition(index))\r\n        );\r\n\r\n        const deleteTasksButtons = document.querySelectorAll(\".delete-task\");\r\n        deleteTasksButtons.forEach((button, index) =>\r\n            button.addEventListener(\"click\", () => handleDeleteTask(index))\r\n        );\r\n\r\n        const completeTasksButtons = document.querySelectorAll(\".complete-task\");\r\n        completeTasksButtons.forEach((button, index) =>\r\n            button.addEventListener(\"click\", () => handleCompleteTask(index))\r\n        );\r\n\r\n        const subtasksContainer = document.querySelector(\".task-subtasks\");\r\n        subtasksContainer.addEventListener(\"click\", handleSubtaskCheckClick);\r\n    }\r\n\r\n    function handleCompleteTask(taskIndex) {\r\n        const task = projectManager.currenProject.tasks[taskIndex];\r\n        if (task.completed) {\r\n            task.clearTodoCompletion();\r\n        }\r\n        else {\r\n            task.completeTodo();\r\n        }\r\n        projectManager.saveProject(projectManager.currenProject);\r\n        viewCurrentProject();\r\n    }\r\n\r\n    function handleSubtaskCheckClick(event) {\r\n        const target = event.target;\r\n        if (target.classList.contains(\"task-subtasks\")) {\r\n            return;\r\n        }\r\n\r\n        const subtask = target.closest(\".subtask\");\r\n        const subtaskCheckbox = subtask.querySelector(\"input\");\r\n        subtaskCheckbox.checked = !subtaskCheckbox.checked;\r\n        const taskIndex = subtask.dataset.taskIndex;\r\n        const subtaskIndex = subtask.dataset.subtaskIndex;\r\n        projectManager.setSubtaskStatus(taskIndex, subtaskIndex, subtaskCheckbox.checked);\r\n\r\n        checkAllSubtasksCompleted(taskIndex);\r\n    }\r\n\r\n    function checkAllSubtasksCompleted(taskIndex) {\r\n        if (projectManager.allSubtaskCompleted(taskIndex)) {\r\n            const response = confirm(\"All subtasks are completed, do you want to complete the task?\");\r\n            if (!response) {\r\n                return;\r\n            }\r\n\r\n            const task = projectManager.currenProject.tasks[taskIndex];\r\n            task.completeTodo();\r\n            projectManager.saveProject(projectManager.currenProject);\r\n            viewCurrentProject();\r\n        }\r\n    }\r\n\r\n    function handleDeleteTask(taskIndex) {\r\n        const response = confirm(\"Are you sure you want to DELETE this task?\");\r\n        if (!response) {\r\n            return;\r\n        }\r\n\r\n        projectManager.removeTask(taskIndex);\r\n        viewCurrentProject();\r\n    }\r\n\r\n    function handleDeleteProject() {\r\n        const response = confirm(\"Are you sure you want to DELETE this project?\");\r\n        if (!response) {\r\n            return;\r\n        }\r\n\r\n        projectManager.removeProject(projectManager.currenProject.id);\r\n        listMyProjects();\r\n        viewProject(0);\r\n    }\r\n\r\n    function viewCurrentProject() {\r\n        viewProject();\r\n    }\r\n\r\n    function loadTaskCreation() {\r\n        setContent(createNewTaskForm);\r\n\r\n        const createTaskButton = document.querySelector(\"form .create-task\");\r\n        createTaskButton.addEventListener(\"click\", handleCreateTaskForm);\r\n    }\r\n\r\n    function handleCreateTaskForm(event) {\r\n        event.preventDefault();\r\n\r\n        const form = document.querySelector(\"form\");\r\n        const formData = new FormData(form);\r\n\r\n        const taskTitle = formData.get(\"task-title\");\r\n        const taskDescription = formData.get(\"task-description\");\r\n        const taskPriority = formData.get(\"task-priority\");\r\n        const taskDueDate = formData.get(\"task-due-date\");\r\n        const taskNotes = formData.get(\"task-notes\");\r\n\r\n        const task = new Task(taskTitle, taskDescription, taskDueDate, taskPriority, false, taskNotes);\r\n\r\n        const taskSubtasks = formData.getAll(\"subtask-description[]\");\r\n\r\n        taskSubtasks.forEach((subtask) => {\r\n            task.addSubtask(subtask);\r\n        });\r\n\r\n        projectManager.addTask(task);\r\n\r\n        viewCurrentProject();\r\n    }\r\n\r\n    function loadTaskEdition(taskIndex) {\r\n        setContent(createEditTaskForm, projectManager.currenProject.tasks[taskIndex]);\r\n\r\n        const saveTaskButton = document.querySelector(\"form .save-task\");\r\n        saveTaskButton.addEventListener(\"click\", handleEditTaskForm);\r\n        saveTaskButton.dataset.taskIndex = taskIndex;\r\n    }\r\n\r\n    function handleEditTaskForm(event) {\r\n        event.preventDefault();\r\n\r\n        const form = document.querySelector(\"form\");\r\n        const formData = new FormData(form);\r\n\r\n        const taskTitle = formData.get(\"task-title\");\r\n        const taskDescription = formData.get(\"task-description\");\r\n        const taskPriority = formData.get(\"task-priority\");\r\n        const taskDueDate = formData.get(\"task-due-date\");\r\n        const taskNotes = formData.get(\"task-notes\");\r\n\r\n        const task = new Task(taskTitle, taskDescription, taskDueDate, taskPriority, false, taskNotes);\r\n\r\n        const taskSubtasks = formData.getAll(\"subtask-description[]\");\r\n\r\n        taskSubtasks.forEach((subtask) => {\r\n            task.addSubtask(subtask);\r\n        });\r\n\r\n        const saveTaskButton = document.querySelector(\"form .save-task\");\r\n        const taskIndex = saveTaskButton.dataset.taskIndex;\r\n\r\n        projectManager.replaceTask(taskIndex, task);\r\n\r\n        viewCurrentProject();\r\n    }\r\n\r\n    function loadProjectEdition() {\r\n        setContent(createEditProjectForm, projectManager.currenProject);\r\n\r\n        const saveProjectButton = document.querySelector(\"form .save-project\");\r\n        saveProjectButton.addEventListener(\"click\", handleSaveProjectForm);\r\n    }\r\n\r\n    function handleSaveProjectForm(event) {\r\n        event.preventDefault();\r\n\r\n        const form = document.querySelector(\"form\");\r\n        const formData = new FormData(form);\r\n\r\n        const projectTitle = formData.get(\"project-title\");\r\n        const projectDescription = formData.get(\"project-description\");\r\n\r\n        projectManager.currenProject.title = projectTitle;\r\n        projectManager.currenProject.description = projectDescription;\r\n\r\n        projectManager.saveProject();\r\n\r\n        viewCurrentProject();\r\n        listMyProjects();\r\n    }\r\n\r\n    function setContent(creatorFunction, params) {\r\n        mainContainer.innerHTML = \"\";\r\n        mainContainer.appendChild(creatorFunction(params));\r\n    }\r\n\r\n    function handleCreateProjectForm(event) {\r\n        event.preventDefault();\r\n\r\n        const form = document.querySelector(\"form\");\r\n        const formData = new FormData(form);\r\n\r\n        const projectTitle = formData.get(\"project-title\");\r\n        const projectDescription = formData.get(\"project-description\");\r\n\r\n        const project = new Project(projectTitle, projectDescription);\r\n        projectManager.addProject(project);\r\n\r\n        listMyProjects();\r\n        viewCurrentProject();\r\n    }\r\n\r\n    function loadProjectCreation() {\r\n        setContent(createNewProjectForm);\r\n\r\n        const createProjectButton = document.querySelector(\"form .create-project\");\r\n        createProjectButton.addEventListener(\"click\", handleCreateProjectForm);\r\n    }\r\n\r\n    const userName = \"User 1\";\r\n    const userNameContainer = document.querySelector(\".user-name\");\r\n    userNameContainer.textContent = userName;\r\n\r\n    const mainContainer = document.querySelector(\".main-container\");\r\n\r\n    const projectManager = new ProjectsManager(userName);\r\n    listMyProjects();\r\n    viewCurrentProject();\r\n\r\n    const createProjectButton = document.querySelector(\".sidebar .create-project\");\r\n    createProjectButton.addEventListener(\"click\", loadProjectCreation);\r\n})();\r\n\r\n// loadContent(createNewProjectForm);\r\n// loadContent(createNewTaskForm);"],"names":[],"sourceRoot":""}